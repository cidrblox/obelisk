#!/usr/bin/env python3
# Copyright (C) 2020-2021 Ivan J. <parazyd@dyne.org>
#
# This file is part of obelisk
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU Affero General Public License version 3
# as published by the Free Software Foundation.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU Affero General Public License for more details.
#
# You should have received a copy of the GNU Affero General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.
import asyncio
import sys
from argparse import ArgumentParser
from configparser import RawConfigParser, NoSectionError
from logging import getLogger, FileHandler, Formatter, StreamHandler
from os import devnull

from obelisk.protocol import ElectrumProtocol, VERSION

# Used for destructor/cleanup
PROTOCOL = None


def logger_config(log, config):
    """Setup logging"""
    fmt = Formatter("%(asctime)s\t%(levelname)s\t%(message)s")
    logstream = StreamHandler()
    logstream.setFormatter(fmt)
    debuglevel = config.get("obelisk", "log_level", fallback="INFO")
    logstream.setLevel(debuglevel)
    log.addHandler(logstream)
    filename = config.get("obelisk", "log_file", fallback=devnull)
    append_log = config.getboolean("obelisk", "append_log", fallback=False)
    logfile = FileHandler(filename, mode=("a" if append_log else "w"))
    logfile.setFormatter(fmt)
    logfile.setLevel(debuglevel)
    log.addHandler(logfile)
    log.setLevel(debuglevel)
    return log, filename


async def run_electrum_server(config, chain):
    """Server coroutine"""
    log = getLogger("obelisk")
    host = config.get("obelisk", "host")
    port = int(config.get("obelisk", "port"))

    endpoints = {}
    endpoints["query"] = config.get("obelisk", "query")
    endpoints["heart"] = config.get("obelisk", "heart")
    endpoints["block"] = config.get("obelisk", "block")
    endpoints["trans"] = config.get("obelisk", "trans")

    server_cfg = {}
    server_cfg["server_hostname"] = config.get("obelisk", "hostname")
    server_cfg["server_port"] = port

    global PROTOCOL
    PROTOCOL = ElectrumProtocol(log, chain, endpoints, server_cfg)

    server = await asyncio.start_server(PROTOCOL.recv, host, port)
    async with server:
        await server.serve_forever()


def main():
    """Main orchestration"""
    parser = ArgumentParser(description=f"obelisk {VERSION}")
    parser.add_argument("config_file", help="Path to config file")
    args = parser.parse_args()

    try:
        config = RawConfigParser()
        config.read(args.config_file)
        config.options("obelisk")
    except NoSectionError:
        print(f"error: Invalid config file {args.config_file}")
        return 1

    log = getLogger("obelisk")
    log, logfilename = logger_config(log, config)
    log.info(f"Starting obelisk {VERSION}")
    log.info(f"Logging to {logfilename}")

    chain = config.get("obelisk", "chain")
    if chain not in ("mainnet", "testnet"):
        log.error("chain is not 'mainnet' or 'testnet'")
        return 1

    try:
        asyncio.run(run_electrum_server(config, chain))
    except KeyboardInterrupt:
        print("\r", end="")
        log.debug("Caught KeyboardInterrupt, exiting...")
        if PROTOCOL:
            asyncio.run(PROTOCOL.stop())
        return 0

    return 1


if __name__ == "__main__":
    sys.exit(main())
